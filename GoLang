var形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。
当一个变量被声明之后，如果没有显示的给他赋值，系统自动赋予它该类型的零值:
整型和浮点型变量的默认值为О和0.0。
字符串变量的默认值为空字符串。·布尔型变量默认为false。
切片、函数、指针变量的默认为nil。



我想定义小k的一些信息，我可以这么表示
var name1 string = "kuangshen"
var age1 int = 183
fmt.Printf("name : %s , age : %d",name1，age1)
这里的name和age就是变量名，name的类型为string,age的类型为int。
他们的值分别为小k和18

短变量声明并初始化
name2 := "kuangshen"
age2 := 18
fmt.printf( "name : %s , age : %d"，name2， age2)
这是Go语言的推导声明写法，编译器会自动根据右值类型推断出左值的对应类型。它可以自动的推导出一些类型，但是使用也是有限制的;
·定义变量，同时显式初始化。
·不能提供数据类型。
·只能用在函数内部。不能随便到处定义(关于函数，我们后面会讲解，听一下就好这里)因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。
注意:由于使用了:=，而不是赋值的=，因此推导声明写法的左值变量必须是没有定义过的变量。若定义过，将会发生编译错误。
1l/定义变量name
2var name string
3//定义变量name，并赋值为"kuangshen" 。4name := "kuangshen"

## 函数运行中函数的局部变量定义优先级高于全局变量

_是匿名变量接收时用于废除
const与var同为变量前缀一个为常量一个为变量
const/var进行短变量赋值（不写类型时）可以不加：
但是如果没有前缀const/var时则必须：=
iota是一个特殊的变量

 
