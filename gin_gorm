gin的使用
一、安装gin
    创建完文件以后使用go get 命令完成gin的安装
    在所创建文件夹的目录下使用命令go get -u github.com/gin-gonic/gin
    如果下载不了：1goland中可以找文件——设置——go——go模块——环境，然后输入GOPROXY=http://goproxy.cn,direct
                 2看看是不是打错字了
                 3系统环境变量中搞一个变量，名字是GOPROXY，值是http://goproxy.cn,direct 
_______________________________________________
例子
1/入门
package main

import "github.com/gin-gonic/gin"
【func 函数名（在其他页面上想访问到那么首字母应该大写）（context *gin.Context）{context.函数（数字，“对应前面函数”）】
【上面中函数可以是】
func main() {
	ginServer := gin.Default()

	ginServer.GET("/hello", func(context *gin.Context) {
		context.String(200, "hello")//注意，此处context是形参可以更改，String是响应为字符串
	})【或写作ginServer.GET("/访问地址名",上面【】中的函数名】
	ginServer.Run(":8082")
}

2、
package main

import (
	"github.com/gin-gonic/gin"
)

func _string(context *gin.Context) {
	context.String(200, "hello")
}
func _json(c *gin.Context) {
	/*type UserInfo struct {
		Username string 'json:"username"'//这个json可以让显示有json处理进而显示的不是默认的
		Age      int
		password string 'json:"_"'//这个就是不显示处理
	}
	user := UserInfo{"wang", 19, "1233456"}*/
        或者/*map
        user：=map[string]string{
                "user_name":"王",
                "age": 23,
           }*/
	c.JSON(200, user)
        或者直接响应：
        c.JSON(200,gin.H{"内容1":"内容2","内容3":"内容4"})
}
func main() {
	ginServer := gin.Default()
	ginServer.GET("/", _string)
	ginServer.GET("/json", _json//注意，此处两个响应的地址应该不一样，否则会出现错误，页面打不开
	ginServer.Run(":80")
}

————————————————————————————————————————————————————————
具体讲解：
//创建一个默认的路由（路由分为前台中台后台路由，前台的路由只需要验证是否登录，中台和后台的需要验证是不是超级管理员）
ginServer：=gin.Default()//不需要什么作用时就用default创建默认的路由即可，路由名ginServer可以换做其他的


//响应
ginServer.GET("/地址名"，对应的处理函数)
处理函数也可以在外面先写出来，也可以像上面一样直接写出来



//启动监听，gin会把web服务运行在本机的0.0.0.0:8082端口上，默认ip0.0.0.0
//启动方式：此时也可以在命令行中使用curl http://上面的ip地址+:访问地址（如gin学习中的8080）+/访问地址名
                                               具体见dos命令行中ip地址的查询，查询出来的ip默认时均可以用此
       （1）（2）经过封装后的方法 
            ginServer.Run(":地址")//如上面8082(也可以写作8080）就代表本电脑所有ip地址
       （2）原生http启动方式：
                      http.ListenAndServer(":8082",ginServer)
          //修改ip，不是默认
           ginServer.Run（"数.数.数.数：地址"）//比如改成127.0.0.1:8081，那么dos命令行中查询出来的其他ip就不行了
                                                  而如果是0.0.0.0那么就是本机内网ip均可以访问  
                                                再比如改成其他ip可以让其他人在他们的电脑上访问
        （3）ip：地址：如上面（2）中127.0.0.1:8081/地址名直接输入网址中可以
————————————————————————————————————————————————————————————————————————————————————————————————————————
细节讲解：
    一、响应：ginServer.GET("/地址名"，对应的处理函数)

           
            引用的响应函数 ：结构：
                     func 函数名（c *gin.Context）{
                          结构体/map/无
                          c.响应函数（状态码，结构体/map/gin.H("":"","":"")）
                             }
           ------————————————————————————————————————————————————
                     响应函数
                      1、字符串，context.String（响应码，“实际内容”）如上面例子中contest（形参）的String响应所得便为字符串    
                         【字符串类对应处理函数写法：】
                                   func 函数名（形参 *ginContext）  
                                     {形参.响应函数（状态码，“内容/字符串”）}
                                   状态码：200代表正常响应，还可以写作http.StatusOk即正常响应
                                         其余Status值（状态码）可以在goland中用ctrl键再点击StatusOK获得
                                         右键页面点击检查，点击网络，再刷新，可以看到状态码
                                         404可以可以响应（？）                                       
                     2、JSOn响应，
                          【JSON对应处理函数写法：】
                                   func 函数名（形参 *ginContext）
                                      {
                                           结构体/map/直接响应
				           形参.JSON（状态码，“内容”） 
                                           }

                             JSON结构体的写法结构体响应是从前往后
                                 type 结构体名 struct{
                                   变量名 变量类型 'json"想要json转换显示的变量名"'
                                   变量名 变量类型 
                                   变量名 变量类型 'json"_"'//此类为隐藏，即不显示该变量
				 }
                             JSON响应map，map响应是从后往前
                                 变量名：=map【变量类型1】变量类型2{
                                          变量（类型1）： 变量（类型2），
                                          变量（类型1）： 变量（类型2），
				 }
                             JSON直接响应，和map一样是从后往前
                                         gin.H{  变量（类型1）： 变量（类型2），
                                                变量（类型1）： 变量（类型2）}
                     3、xml响应
                           func _xml(c *gin.Context) {
         	//        type UserInfo struct {
	        //	  Username string
	        //	  Age      int
	        //	  password string
        	//         }
	        /          /user := UserInfo{"wang", 19, "1233456"}//此处貌似能用结构体，但是up搞错了，我也不知道怎么用
	           c.XML(200, gin.H{"username": "wang", "age": "18", "data": gin.H{"massage": "hey"}})
                            }
                    4、yaml响应，和xml相同  但是输入ip后默认的行为是把这个东西下载下来，而不是在页面中打开
                    5、html响应， 
                   首先有一个模板文件（目录）一般放在根目录下（即该打开的文件夹的目录）
                   然后在该模板目录下放一个html文件,body下面可以写要显示的值，并可以显示gin.H中的值
                                      比如gin.H{"username": "wang"}，那么只需要在body之间写个<header>{{ .username}}</header>即可显示wang
                   而且还需要加载模板目录下的所有模板目录
                  ：加载代码：路由名.LoadHTMLGlob("模板目录名/*")
                   例：ginServer.LoadHTMLGlob("/*")
                   然后与上面xml、yaml接近
                   c.HTML(状态码,"上面放的html文件的名字",gin.H{"username": "wang", "age": "18", "data": gin.H{"massage": "hey"}}
                                                                  gin.H此处如果不写任何东西，那么页面中只会显示body下面的值
                func main(){
                   ginServer：=gin.Default()
                   ginServer.LoadHTMLGlob("temphtml/*")
                   ginServer.GET("html", _html)
                     ginServer.Run("80")
                            }
————————————————6、文件响应：
                首先在文件目录下创建一个新文件夹，在里面放一张图片
                	//在golang中，没有相对于文件的路径，只有相对于项目的路径，
                        也就是在该xinagying.go中可以直接通过根目录去访问fish.jpg,而不需要相对于xiangying.go去找jpg的路径
                        ginServer.StaticFile("访问路径", "相对于项目的路径")这是访问单个文件的用法即该文件所处文件夹中其他的文件访问不了(但是图片可以访问?)
                        ginServer.StaticFS("ip访问填写的路径", http.Dir("相对于该项目的路径"))这是访问一个文件夹的用法
               举例：
                      func main（）{
                     ginServer：=gin.Default()
                     ginServer.StaticFS("/file", http.Dir("pictures/textfile"))
                     ginServer.Staticfile("/pictures/fish/","pictures/fish.jpg")后面的或者./pictures/fish.jpg
                     ginServer.Run("80")
		      }//页面访问时输入127.0.0.1：80/pictures/fish
              7、重定向
                        func _redirect(c *gin.Context) {
	                  c.Redirect(状态码, "跳转地址")
                               }
                       状态码中301是永久缓存，更改地址后没有用；302是暂时缓存，更改后有用
                     用法和xml、Json一样，需要在main函数中写
                             	ginServer.GET("访问地址", _redirect)
